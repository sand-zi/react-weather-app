{"version":3,"sources":["store/reducers/weatherReducer.js","store/store.js","cmps/AppHeader.jsx","pages/FavoritesPage.jsx","services/utilService.js","services/storageService.js","services/weatherService.js","cmps/ForecastPreview.jsx","cmps/CurrentLocationPreview.jsx","cmps/ForeacstList.jsx","cmps/WeatherSearch.jsx","cmps/OptionPreview.jsx","cmps/OptionList.jsx","pages/WeatherApp.jsx","store/actions/weatherActions.js","pages/Home.jsx","App.js","index.js"],"names":["initialState","currLocation","localizedName","key","country","forecasts","searchBy","name","favoriteCities","isDarkMode","isFahrenheitOn","rootReducer","combineReducers","weatherModule","state","action","type","store","createStore","applyMiddleware","thunk","AppHeader","className","exact","to","FavoritesPage","utilService","makeId","length","txt","possible","i","charAt","Math","floor","random","getCurrentPosition","options","Promise","resolve","reject","navigator","geolocation","storageService","load","str","localStorage","getItem","JSON","parse","save","val","stringify","setItem","weatherService","getLocation","getForecastByLocationKey","getLocationsList","saveLocation","location","CURRENT_LOCATION","date","Date","now","CURRENT_FORECAST","API_KEY","initialLocation","a","coords","latitude","longitude","_getLocationCodeByGeoLocation","console","log","cityKey","axios","get","res","data","map","forecast","_getFormatedForecast","lat","lon","_getFormatedLocation","userInput","locations","city","withId","id","dateTime","forecastId","toDateString","dayForecast","icon","iconPhrase","temperature","nightForecast","Img","styled","margin","display","maxWidth","maxHeight","String","fromCodePoint","parseInt","ForecastPreview","isFahrenheit","setIsFahrenheit","useState","isDayForecastShown","setIsDayForecastShown","temoUnicode","convertTemp","temp","Paper","sx","p","flexGrow","width","Grid","container","direction","justifyContent","alignItems","item","ButtonBase","height","alt","src","xs","sm","spacing","Typography","gutterBottom","variant","component","textAlign","color","cursor","onClick","CurrentLocationPreview","isFavorite","setIsFavorite","Container","Box","Button","startIcon","ForecastList","rowSpacing","columnSpacing","md","WeatherSearch","setOptions","value","setValue","performSearch","input","locationOptions","debouncedSearch","useRef","debounce","current","onHandleChange","event","target","msg","isEnglish","test","toast","error","autoClose","toastId","TextField","onChange","ev","label","OptionPreview","option","onSelectLocation","optionName","ListItem","button","ListItemText","primary","OptionList","List","WeatherApp","useSelector","dispatch","useDispatch","useEffect","loadForeacsts","useCallback","updateCurrentLocation","Home","App","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03b47cf8.chunk.js","sourcesContent":["const initialState = {\r\n    currLocation: {\r\n        localizedName: 'Tel Aviv',\r\n        key: '215854',\r\n        country: 'Israel'\r\n    },\r\n    forecasts: [],\r\n    searchBy: {\r\n        name: ''\r\n    },\r\n    favoriteCities: [],\r\n    isDarkMode: false,\r\n    isFahrenheitOn: false\r\n}\r\n\r\n// CHECK THE CURRCITY\r\n\r\nexport function weatherReducer(state = initialState, action) {\r\n\r\n    switch (action.type) {\r\n        case 'SET_CURRLOCATION':\r\n            return { ...state, currLocation: action.currLocation}\r\n        case 'SET_FORECASTS':\r\n            return { ...state, forecasts: action.forecasts }\r\n        case 'SET_FAVORITE_CITIES':\r\n            return { ...state, favoriteCities: action.favoriteCities }\r\n        case 'SET_SEARCH':\r\n            return { ...state, searchBy: action.searchBy }\r\n        case 'SET_THEME_MODE':\r\n            return { ...state, isDarkMode: action.isDarkMode }\r\n        case 'SET_TEMPERATURE_CONVERSION':\r\n            return { ...state, isFahrenheitOn: action.isFahrenheitOn }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// case 'ADD_FAVORITE_CITY':\r\n//     return { ...state, favoriteCities: [...state.favoriteCities, action.favoriteCity] }\r\n// case 'UPDATE_FAVORITE_CITY':\r\n//     return { ...state, toys: state.toys.map(toy => (toy._id === action.toy._id) ? action.toy : toy) }\r\n// case 'REMOVE_FAVORITE_CITY':\r\n//     return { ...state, favoriteCities: state.favoriteCities.filter(toy => city._id !== action.cityId) }","import { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport {weatherReducer} from './reducers/weatherReducer.js'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    weatherModule:weatherReducer\r\n})\r\n\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))","import { NavLink } from 'react-router-dom'\r\n\r\n\r\nexport const AppHeader = () => {\r\n    return (\r\n        <header className='app-header'>\r\n            <nav className='main-nav'>\r\n                <ul className=\"flex auto-center clean-list column-gap\">\r\n                    <li><NavLink className=\"main-link\" exact to='/'>Home</NavLink></li>\r\n                    <li><NavLink className=\"main-link\" to='/favorites'>Favorites</NavLink></li>\r\n\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    )\r\n}","\r\nexport const FavoritesPage = () => {\r\n    return (\r\n        <div className=\"favorites-page\">\r\n            Hello  i am favorite cities page\r\n        </div>\r\n    )\r\n}","export const utilService = {\r\n    makeId, \r\n    getCurrentPosition\r\n};\r\n\r\nfunction makeId(length = 6) {\r\n    var txt = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n\r\n    return txt;\r\n}\r\n\r\n\r\n\r\nfunction getCurrentPosition(options = {}) {\r\n    return new Promise((resolve, reject) => {\r\n        navigator.geolocation.getCurrentPosition(resolve, reject, options);\r\n    });\r\n}","export const storageService = {\r\n    load,\r\n    save\r\n}\r\n\r\nfunction load(key) {\r\n    const str = localStorage.getItem(key)\r\n    return JSON.parse(str)\r\n}\r\n\r\nfunction save(key, val) {\r\n    const str = JSON.stringify(val)\r\n    localStorage.setItem(key, str)\r\n}","import axios from 'axios'\r\nimport { utilService } from './utilService'\r\nimport { storageService } from './storageService'\r\n\r\n\r\nexport const weatherService = {\r\n    getLocation,\r\n    getForecastByLocationKey,\r\n    getLocationsList,\r\n    saveLocation\r\n}\r\n\r\nconst CURRENT_FORECAST = 'CurrForecast'\r\nconst CURRENT_LOCATION = 'CurrLocation'\r\nconst API_KEY = 'sh0OUQ7RvtXa9uUhfJCXLc3lNEqpVCeS'\r\nconst initialLocation = {\r\n    localizedName: 'Tel Aviv',\r\n    key: '215854',\r\n    country: 'Israel'\r\n}\r\n\r\nconst initialFilter = {\r\n    term: ''\r\n}\r\n\r\n\r\nasync function getLocation() {\r\n    let currLocation = storageService.load(CURRENT_LOCATION) || null\r\n    if (!currLocation) {\r\n        try {\r\n            const { coords } = await utilService.getCurrentPosition()\r\n            const { latitude, longitude } = coords\r\n            currLocation = await _getLocationCodeByGeoLocation(latitude, longitude)\r\n\r\n        }\r\n        catch (err) {\r\n            console.log(`getLocation error`, err)\r\n            currLocation = { ...initialLocation }\r\n\r\n        }\r\n        storageService.save(CURRENT_LOCATION, { ...currLocation, date: Date.now() })\r\n    }\r\n\r\n    return currLocation\r\n\r\n}\r\n\r\n\r\nasync function getForecastByLocationKey(cityKey) {\r\n    try {\r\n        const res = await axios.get(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityKey}?apikey=${API_KEY}&metric=true`)\r\n        if ((res.data['DailyForecasts'].length)) {\r\n            const forecasts = res.data['DailyForecasts'].map(forecast => _getFormatedForecast(forecast))\r\n            storageService.save(CURRENT_FORECAST, { forecasts, date: Date.now() })\r\n            return forecasts\r\n        } else {\r\n            return []\r\n        }\r\n\r\n        // storageService.save(CURRENT_FORECAST, { forecast: [...res.data['DailyForecasts']], date: Date.now() })\r\n        // return (res.data['DailyForecasts'].length) ? res.data['DailyForecasts'] : []\r\n    } catch (err) {\r\n        console.log(`getForecastByLocationKey function from weatherService`, err)\r\n    }\r\n\r\n}\r\n\r\n\r\nasync function _getLocationCodeByGeoLocation(lat, lon) {\r\n    try {\r\n        const res = await axios.get(`http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${API_KEY}&q=${lat},${lon}`)\r\n        return _getFormatedLocation(res.data['LocalizedName'], res.data['Key'], res.data['Country']['LocalizedName'])\r\n    } catch (err) {\r\n        console.log(`getLocationCodeByGeoLocation does not respond`, err)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nasync function getLocationsList(userInput) {\r\n    try {\r\n        const res = await axios.get(`http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${userInput}`)\r\n        if (!res.data || res.data.length === 0) return []\r\n        const locations = res.data.map(city => {\r\n            return _getFormatedLocation(city['LocalizedName'], city['Key'], city['Country']['LocalizedName'], true)\r\n        }\r\n        )\r\n        return locations\r\n\r\n    } catch (err) {\r\n        console.log(`There is an error in getLocationsList function`, err)\r\n\r\n    }\r\n}\r\n\r\n\r\nfunction _getFormatedLocation(localizedName, key, country, withId = false) {\r\n\r\n    return (withId) ? { localizedName, key, country, id: utilService.makeId() } : { localizedName, key, country }\r\n}\r\n\r\nfunction _getFormatedForecast(forecast) {\r\n    let dateTime = new Date(forecast['Date'])\r\n    return {\r\n        forecastId:utilService.makeId(),\r\n        date: dateTime.toDateString(),\r\n        dayForecast: {\r\n            icon: forecast['Day']['Icon'],\r\n            iconPhrase: forecast['Day']['IconPhrase'],\r\n            temperature: forecast['Temperature']['Maximum']['Value']\r\n        },\r\n        nightForecast: {\r\n            icon: forecast['Night']['Icon'],\r\n            iconPhrase: forecast['Night']['IconPhrase'],\r\n            temperature: forecast['Temperature']['Minimum']['Value']\r\n        }\r\n\r\n    }\r\n}\r\n\r\nfunction saveLocation(location) {\r\n    storageService.save(CURRENT_LOCATION, { ...location, date: Date.now() })\r\n}\r\n\r\n","\r\nimport { useState } from 'react';\r\n\r\nimport { styled } from '@mui/material/styles';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport Typography from '@mui/material/Typography';\r\nimport ButtonBase from '@mui/material/ButtonBase';\r\n\r\n\r\nconst Img = styled('img')({\r\n    margin: 'auto',\r\n    display: 'block',\r\n    maxWidth: '100%',\r\n    maxHeight: '100%',\r\n});\r\nString.fromCodePoint(parseInt('0x2103', 16))\r\nexport const ForecastPreview = ({ forecast, isFahrenheit, setIsFahrenheit }) => {\r\n\r\n    const [isDayForecastShown, setIsDayForecastShown] = useState(true)\r\n    \r\n    const temoUnicode = (isFahrenheit) ? String.fromCodePoint(parseInt('0x2109', 16)) : String.fromCodePoint(parseInt('0x2103', 16))\r\n\r\n    const convertTemp = (temp) => {\r\n        return (isFahrenheit) ? ((temp * 9 / 5) + 32) : temp\r\n    }\r\n    return (\r\n        <div className=\"forecast-preview\">\r\n            <Paper sx={{ p: 2, margin: 'auto', flexGrow: 1, width: 200 }}>\r\n                <Grid container direction=\"column\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\">\r\n                    <Grid item>\r\n                        <ButtonBase sx={{ width: 128, height: 128 }}>\r\n                            <Img alt=\"complex\" src={(isDayForecastShown) ? `./images/${forecast.dayForecast.icon}.png` : `./images/${forecast.nightForecast.icon}.png`} />\r\n                        </ButtonBase>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm container>\r\n                        <Grid item xs container direction=\"column\" spacing={2}>\r\n                            <Grid item xs>\r\n                                <Typography gutterBottom variant=\"body2\" component=\"div\" textAlign='center'>\r\n                                    {forecast.date}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" gutterBottom textAlign='center'>\r\n                                    {(isDayForecastShown) ? forecast.dayForecast.iconPhrase : forecast.nightForecast.iconPhrase}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\" textAlign='center'>\r\n                                    {(isDayForecastShown) ? convertTemp(+forecast.dayForecast.temperature) : convertTemp(+forecast.nightForecast.temperature)}\r\n                                    {temoUnicode}\r\n\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                             \r\n                                    <Typography sx={{ cursor: 'pointer' }} variant=\"body2\" onClick={() => setIsDayForecastShown(!isDayForecastShown)} textAlign='center'>\r\n                                        Check {(isDayForecastShown) ? 'Night' : 'Day'} Forecast\r\n                                    </Typography>\r\n                                \r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import Container from '@mui/material/Container';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport { useState } from 'react';\r\nimport ChangeCircleIcon from '@mui/icons-material/ChangeCircle';\r\n\r\n\r\nexport const CurrentLocationPreview = ({ isFahrenheit, setIsFahrenheit }) => {\r\n\r\n    const [isFavorite, setIsFavorite] = useState(false)\r\n\r\n    return (\r\n        <section className=\"current-location\">\r\n            <Container maxWidth=\"sm\">\r\n                <Box >\r\n                </Box>\r\n                <Box >\r\n                    <Button variant=\"outlined\" startIcon={<ChangeCircleIcon />} onClick={() => setIsFahrenheit(!isFahrenheit)}>\r\n                        Show Temperature in {(isFahrenheit) ? 'Fahrenheit' : 'Celsius'}\r\n                    </Button>\r\n                    <Button variant=\"outlined\" startIcon={(isFavorite) ? <FavoriteIcon /> : <FavoriteBorderIcon />} onClick={() => setIsFavorite(!isFavorite)}>\r\n                        Add To Favorites\r\n                    </Button>\r\n                </Box>\r\n            </Container>\r\n        </section>\r\n    )\r\n\r\n}","import { ForecastPreview } from \"./ForecastPreview\"\r\nimport Grid from '@mui/material/Grid';\r\nimport { CurrentLocationPreview } from \"./CurrentLocationPreview\";\r\nimport { useState } from \"react\";\r\nexport const ForecastList = ({ forecasts }) => {\r\n    const [isFahrenheit, setIsFahrenheit] = useState(false)\r\n    return (\r\n        <div className=\"forecast-list\">\r\n            <CurrentLocationPreview isFahrenheit={isFahrenheit} setIsFahrenheit={setIsFahrenheit} />\r\n            <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\r\n                {forecasts.map(forecast => (\r\n                    <Grid item key={forecast.forecastId}>\r\n                        <ForecastPreview forecast={forecast} isFahrenheit={isFahrenheit} setIsFahrenheit={setIsFahrenheit} />\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}","import { useState, useRef } from 'react'\r\nimport debounce from 'lodash.debounce';\r\nimport TextField from '@mui/material/TextField';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\n\r\nimport { weatherService } from '../services/weatherService.js'\r\nconst customId = \"error-toast\";\r\nconst throwError = (msg) => {\r\n    toast.error(msg, { autoClose: 3000, toastId: customId })\r\n};\r\n\r\nexport const WeatherSearch = ({setOptions}) => {\r\n    const [value, setValue] = useState('');\r\n \r\n    const performSearch = async (input) => {\r\n        const locationOptions = await weatherService.getLocationsList(input)\r\n        if (locationOptions.length) {\r\n            setOptions([...locationOptions])\r\n        }\r\n    }\r\n    const debouncedSearch = useRef(debounce(input => performSearch(input), 2000)).current\r\n\r\n\r\n    const onHandleChange = event => {\r\n        const { value } = event.target\r\n        setValue(value)\r\n        let isEnglish = /^[a-zA-Z\\s]*$/.test(value)\r\n\r\n        if (value.length > 0 && isEnglish) {\r\n            debouncedSearch(value)\r\n        }\r\n        else if (value.length > 0) {\r\n            throwError(\"The search is available on English only\")\r\n            return\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"weather-search\">\r\n            <ToastContainer />\r\n            <TextField\r\n                value={value}\r\n                onChange={(ev) => onHandleChange(ev)}\r\n                label=\"Location Search\"\r\n                variant=\"outlined\"\r\n\r\n            />\r\n\r\n        </div>\r\n    );\r\n}","import ListItem from '@mui/material/ListItem';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nexport const OptionPreview = ({ option, onSelectLocation }) => {\r\n\r\n    const optionName = `${option.localizedName} - ${option.country}`\r\n\r\n    const selectLocation = () => {\r\n        \r\n        onSelectLocation(option)\r\n    }\r\n\r\n    return (\r\n        <ListItem className=\"option-preview\" key={option.id} button onClick={selectLocation}>\r\n            <ListItemText primary={optionName} />\r\n        </ListItem>\r\n    )\r\n}","import { OptionPreview } from \"./OptionPreview\"\r\nimport List from '@mui/material/List';\r\n\r\nexport const OptionList = ({ options, onSelectLocation }) => {\r\n\r\n    return (\r\n        <List>\r\n            {options.map(option => <OptionPreview option={option} key={option.id} onSelectLocation={onSelectLocation} />)}\r\n        </List>\r\n    )\r\n}","import { useSelector, useDispatch } from 'react-redux'\r\nimport { useEffect, useCallback, useState } from 'react'\r\n\r\n\r\nimport { loadCurrentLocation, loadForeacsts, updateCurrentLocation } from '../store/actions/weatherActions.js'\r\n\r\nimport { ForecastList } from \"../cmps/ForeacstList\"\r\nimport { WeatherSearch } from \"../cmps/WeatherSearch\"\r\n\r\nimport { OptionList } from '../cmps/OptionList.jsx'\r\n\r\nexport const WeatherApp = () => {\r\n\r\n    const { currLocation, forecasts } = useSelector(state => state.weatherModule)\r\n    const [options, setOptions] = useState([])\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(loadCurrentLocation())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(loadForeacsts(currLocation.key))\r\n    }, [dispatch])\r\n\r\n    const onSelectLocation = useCallback(location => {\r\n        dispatch(updateCurrentLocation({ ...location }))\r\n        setOptions([])\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <div className=\"weather-app\">\r\n            <div className=\"weather search\">\r\n                <WeatherSearch setOptions={setOptions} />\r\n                {(options.length > 0) && <OptionList options={options} onSelectLocation={onSelectLocation} />}\r\n            </div>\r\n\r\n            {(forecasts.length > 0) && <ForecastList forecasts={forecasts} />}\r\n        </div>\r\n    )\r\n}\r\n","import { weatherService } from '../../services/weatherService.js'\r\n\r\n\r\nexport function loadForeacsts(key = '215854') {\r\n    return async dispatch => {\r\n        try {\r\n            const forecasts = await weatherService.getForecastByLocationKey(key)\r\n            dispatch({ type: 'SET_FORECASTS', forecasts })\r\n        } catch (err) {\r\n            console.log('there is a problem in loading forecasts in loadForeacsts action', err)\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function loadCurrentLocation() {\r\n    return async dispatch => {\r\n        try {\r\n            const currLocation = await weatherService.getLocation()\r\n            dispatch({ type: 'SET_CURRLOCATION', currLocation })\r\n        } catch (err) {\r\n            console.log('there is a problem in loading currLocation in loadCurrentLocation action', err)\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function updateCurrentLocation(location) {\r\n    weatherService.saveLocation(location)\r\n    return (dispatch) => dispatch({ type: 'SET_CURRLOCATION', currLocation: location })\r\n}\r\n\r\nexport function loadFavoriteCities() {\r\n    return async dispatch => {\r\n        try {\r\n            const favoriteCities = await weatherService.query()\r\n            dispatch({ type: 'SET_FAVORITE_CITIES', favoriteCities })\r\n        } catch (err) {\r\n            console.log('there is a problem in loading favotite city in loadFavoriteCities action', err)\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function setFilter(filterBy) {\r\n    return async dispatch => {\r\n        try {\r\n            const type = 'SET_FILTER'\r\n            dispatch({ type, filterBy })\r\n\r\n        } catch (err) {\r\n            console.log('there is problem in set filter action')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function setTemperatureMode(isFahrenheitOn) {\r\n    return async dispatch => {\r\n        try {\r\n            const type = 'SET_TEMPERATURE_CONVERSION'\r\n            dispatch({ type, isFahrenheitOn })\r\n\r\n        } catch (err) {\r\n            console.log('there is problem in set filter action')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function setThemeMode(isDarkMode) {\r\n    return async dispatch => {\r\n        try {\r\n            const type = 'SET_THEME_MODE'\r\n            dispatch({ type, isDarkMode })\r\n\r\n        } catch (err) {\r\n            console.log('there is problem in set filter action')\r\n            throw err\r\n        }\r\n    }\r\n}","\r\nimport { WeatherApp } from \"./WeatherApp\"\r\n\r\nexport const Home = () => {\r\n    return (\r\n        <div className=\"home-page\">\r\n            <WeatherApp />\r\n        </div>\r\n    )\r\n}","import { Switch, Route } from 'react-router-dom';\n\nimport { AppHeader } from './cmps/AppHeader';\nimport { FavoritesPage } from './pages/FavoritesPage';\nimport { Home } from './pages/Home';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppHeader/>\n      <Switch>\n        <Route path=\"/favorites\" component={FavoritesPage}></Route>\n        <Route path=\"/\" exact component={ Home}></Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { HashRouter as Router } from 'react-router-dom'\n\n\nimport { Provider } from 'react-redux';\nimport { store } from './store/store.js'\n\nimport App from './App';\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}